import json
import os
from datetime import datetime, timedelta, timezone

import requests
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv

from utils.release_account import release_account

load_dotenv()

rt = Router()

class Extend(StatesGroup):
    rent_id = State()
    num_of_days = State()

@rt.message(Command('extend_rent'))
async def extend_rent_handler(message: Message, state: FSMContext):
    rents = requests.get(url=f'{os.getenv("MY_API_BASE")}/is-rent-available-for-extend/{message.from_user.id}/').json()
    result = {}
    for item in rents:
        acc_id = item["steam_account"]["id"]
        if acc_id not in result or item["id"] > result[acc_id]["id"]:
            result[acc_id] = item

    if rents:
        format_rents = '\n'.join(
            f'# {rent["id"]} - '
            f'{rent["steam_account"]["game_name"]} #{rent["steam_account"]["id"]} - '
            f'–∞—Ä–µ–Ω–¥–∞ –¥–æ {datetime.fromisoformat(rent["use_end_datetime"]).strftime("%Y-%m-%d")} - '
            f'{rent["status"]} - '
            f'{"–°–≤–æ–±–æ–¥–µ–Ω" if rent["available"] else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}'
            for rent in result.values()
        )
        await message.answer(f"–í—Å–µ –≤–∞—à–∏ –∞—Ä–µ–Ω–¥—ã. –ü–æ–º–Ω–∏—Ç–µ —á—Ç–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —É–∂–µ –∏—Å—Ç–µ–∫—à—É—é –∞—Ä–µ–Ω–¥—É —á—Ç–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç–∞ —É–∂–µ –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º \n\n"
                             f"{format_rents}\n\n"
                             f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞, —Å–∫–∏–Ω—å—Ç–µ –≤ —á–∞—Ç –µ–µ id")

        await state.set_state(Extend.rent_id)
    else:
        await message.answer(f"–£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –∞—Ä–µ–Ω–¥")

@rt.message(Extend.rent_id)
async def get_rent_id(message: Message, state: FSMContext):
    rents = requests.get(url=f'{os.getenv("MY_API_BASE")}/is-rent-available-for-extend/{message.from_user.id}/').json()

    available_ids = {d["id"] for d in rents}

    if message.text.isdigit():
        rent_id = int(message.text)

        if rent_id in available_ids:
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É –∞—Ä–µ–Ω–¥—É (–ª—É—á—à–µ, —á–µ–º –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –≤ if)
            rent = next((r for r in rents if r["id"] == rent_id), None)

            if rent and rent["available"]:
                await state.update_data(rent_id=rent_id)
                await state.set_state(Extend.num_of_days)
                await message.answer(
                    "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –¥–æ–ø –∞—Ä–µ–Ω–¥—ã."
                    "(–ö–∞–∂–¥—ã–π –¥–æ–ø –¥–µ–Ω—å —Ç–∞–∫–∂–µ 200 —Ä—É–±)"
                )
            else:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–∞ –∞—Ä–µ–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
        else:
            await message.answer(
                "–¢–∞–∫–æ–≥–æ id –Ω–µ—Ç –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∞—Ä–µ–Ω–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
            )
    else:
        await message.answer(
            "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
        )


@rt.message(Extend.num_of_days)
async def num_of_extend_days(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(num_of_days=message.text)
        data = await state.get_data()

        previous_rent = requests.get(url=f'{os.getenv("MY_API_BASE")}/rents/{data["rent_id"]}').json()
        start_datetime = datetime.fromisoformat(previous_rent['use_end_datetime'])
        end_datetime = start_datetime + timedelta(int(data['num_of_days']))

        await message.answer('–ü–µ—Ä–µ–π–¥–µ–º –∫ –æ–ø–ª–∞—Ç–µ')
        # –î–∞–ª—å—à–µ –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã

        update_data = {
            "status": "active",
            "use_start_datetime": str(start_datetime),
            "use_end_datetime": str(end_datetime)
        }

        update_rent_info = requests.patch(
            url=f'{os.getenv("MY_API_BASE")}/update-rent/{data["rent_id"]}',
            data=json.dumps(update_data)
        ).json()

        print(update_rent_info)

        steam_account_login = update_rent_info['steam_account']['login']
        steam_account_password = update_rent_info['steam_account']['password']
        delay_seconds = int((end_datetime - datetime.now()).total_seconds())

        release_account.send_with_options(
            args=(update_rent_info['steam_account']['id'],
                  update_rent_info['id']),
            delay=120 * 1000
        )

        await message.answer(
            f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n'
            f'üéâ –í–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞!\n\n'
            f'üë§ –õ–æ–≥–∏–Ω: {steam_account_login}\nüîí –ü–∞—Ä–æ–ª—å: {steam_account_password}\n'
            f'–ê—Ä–µ–Ω–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞ —Å {start_datetime.strftime("%Y-%m-%d")} –ø–æ {end_datetime.strftime("%Y-%m-%d")}'
        )

        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')