import json
import os
from xml.dom import ValidationErr

import requests
from aiogram.filters import CommandStart
from aiogram import Router, html
from aiogram.types import Message, FSInputFile
from dotenv import load_dotenv

load_dotenv()

from start_project import BASE_DIR

rt = Router()

MAX_RETIES = 3

@rt.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    welcome_message = (f"–ü—Ä–∏–≤–µ—Ç {html.bold(message.from_user.username)} üëã \n\n"
                      f"–Ø —Å–µ—Ä–≤–∏—Å –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã: Steam, EGS –∏ –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å! \n")
    photo = FSInputFile(path=os.path.join(BASE_DIR, 'bot/media/Welcome_pic.png'))

    user_data = {'id': message.from_user.id, 'username': message.from_user.username}

    for retry in range(MAX_RETIES + 1):
        try:
            create_user = requests.post(url=f'{os.getenv("MY_API_BASE")}/create-user/', data=json.dumps(user_data))

            if retry == MAX_RETIES:
                raise ValidationErr
            elif create_user.status_code == 200:
                await message.answer_photo(
                    photo=photo,
                    caption=welcome_message
                )
                break
            elif create_user.status_code == 409:
                await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
                break
            elif not create_user.status_code == 200:
                continue


        except Exception:
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ')
