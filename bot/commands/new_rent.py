import json
import os
from datetime import datetime, timedelta, timezone

import requests
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from dotenv import load_dotenv

from utils.release_account import release_account

load_dotenv()

rt = Router()

class Form(StatesGroup):
    game = State()
    num_of_days = State()
    payment = State()


@rt.inline_query()
async def handle_inline_query(query: types.InlineQuery):
    user_text = query.query.lower()

    games = requests.get(url=f'{os.getenv("MY_API_BASE")}/get-all-games/').json()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É
    filtered = [g for g in games if user_text in g.lower()]

    results = [
        types.InlineQueryResultArticle(
            id=str(i),
            title=game,
            input_message_content=types.InputTextMessageContent(message_text=game)
        ) for i, game in enumerate(filtered[:20])  # –æ–≥—Ä–∞–Ω–∏—á–∏–º 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    ]

    await query.answer(results, cache_time=1)


@rt.message(Command('rent'))
async def rent_game(message: Message, state: FSMContext) -> None:
    try:
        response = requests.get(url=f'{os.getenv("MY_API_BASE")}/get-all-games/')
        games = response.json()
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not games:
        await message.answer("üì≠ –ü–æ–∫–∞ —á—Ç–æ –∏–≥—Ä –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    games_and_accounts = {}

    for game in games:
        try:
            g = requests.get(url=f'{os.getenv("MY_API_BASE")}/get_accounts_by_game_name/{game}').json()
            for elem in g:
                games_and_accounts.setdefault(elem['game_name'].lower(), []).append(elem['id'])
        except Exception:
            continue

    await state.update_data(dict_of_games=games_and_accounts)
    game_list = "\n".join(f"üéÆ {game}" for game in games)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ:\n\n"
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä —Ç–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º:\n\n"
        "@BestGamesRentBot –∏–º—è –∏–≥—Ä—ã ‚Äî —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º\n\n"
        f"{game_list}"
    )
    await state.set_state(Form.game)


@rt.message(Form.game)
async def handle_game_input(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    dict_of_games = data.get("dict_of_games", {})
    user_input = message.text.strip()

    if user_input.lower() in dict_of_games and dict_of_games[user_input.lower()]:
        await state.update_data(game=user_input)
        await state.set_state(Form.num_of_days)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞—Ä–µ–Ω–¥—ã (1 –¥–µ–Ω—å = 200‚ÇΩ):")
    else:
        await message.answer("‚ùå –¢–∞–∫–æ–π –∏–≥—Ä—ã –Ω–µ—Ç –∏–ª–∏ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–Ω—è—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")


@rt.message(Form.num_of_days)
async def handle_num_of_rent_days(message: Message, state: FSMContext) -> None:
    if message.text.isdigit():
        await state.update_data(num_of_days=message.text)
        await state.set_state(Form.payment)
        await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text} –¥–Ω–µ–π –∞—Ä–µ–Ω–¥—ã')
        await message.answer(f'–ü–µ—Ä–µ–π–¥–µ–º –∫ –æ–ø–ª–∞—Ç–µ')
    else:
        await message.answer('üö´ –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


@rt.message(Form.payment)
async def check_payment(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    game = data.get('game')
    num_of_rent_days = data.get("num_of_days")

    try:
        get_accounts = requests.get(
            url=f'{os.getenv("MY_API_BASE")}/get_accounts_by_game_name/{game}'
        ).json()
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not get_accounts:
        await message.answer("‚ùå –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —ç—Ç–æ–π –∏–≥—Ä–µ —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if message.text == "–£—Å–ø–µ—à–Ω–æ":
        await state.update_data(payment='successful')
        await message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n\n–°–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º –∞—Ä–µ–Ω–¥—É.')

        try:
            release_date = datetime.now(timezone.utc) + timedelta(int(num_of_rent_days))
            delay_seconds = int((release_date - datetime.now(timezone.utc)).total_seconds())
            steam_account_id = get_accounts[0]['id']


            rent_data = {
                'user_id': message.from_user.id,
                'steam_account_id': steam_account_id,
                'use_end_datetime': str(release_date)
            }

            rent_create = requests.post(
                url=f'{os.getenv("MY_API_BASE")}/create-new-rent/',
                data=json.dumps(rent_data),
            )

            if rent_create.status_code != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ –∞—Ä–µ–Ω–¥—ã: {rent_create.text}")

            rent = rent_create.json()

            # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä ‚Äî –∑–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
            release_account.send_with_options(args=(steam_account_id, rent['id']), delay=120 * 1000)

            await message.answer(
                f'üéâ –í–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞!\n\n'
                f'üë§ –õ–æ–≥–∏–Ω: \nüîí –ü–∞—Ä–æ–ª—å: \n'
                f'‚è≥ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {num_of_rent_days} –¥–Ω–µ–π'
            )
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä–µ–Ω–¥—É. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}")
        finally:
            await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –û–∂–∏–¥–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ù–∞–ø–∏—à–∏—Ç–µ *–£—Å–ø–µ—à–Ω–æ*, –∫–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ.", parse_mode='Markdown')





